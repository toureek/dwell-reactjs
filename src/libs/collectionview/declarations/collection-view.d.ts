import CollectionViewLayout from './layout';
import { Position, Size } from './types';
import CollectionViewDelegate from './delegate';
export interface CollectionViewThresholds {
    readonly left: number;
    readonly top: number;
    readonly right: number;
    readonly bottom: number;
}
export interface CollectionViewParameters {
    readonly animationDuration?: number;
    readonly repositioningClassName?: string;
    readonly appearingClassName?: string;
    readonly disappearingClassName?: string;
    readonly resizeThrottleDuration?: number;
    readonly thresholds?: {
        readonly left?: number;
        readonly top?: number;
        readonly right?: number;
        readonly bottom?: number;
    };
    readonly positionImprovementOffset?: number;
}
export default class CollectionView {
    private static readonly EASING;
    static readonly DEFAULT_THRESHOLD: number;
    static readonly DEFAULT_REPOSITIONING_CLASS_NAME: string;
    static readonly DEFAULT_APPEARING_CLASS_NAME: string;
    static readonly DEFAULT_DISAPPEARING_CLASS_NAME: string;
    static readonly DEFAULT_ANIMATION_DURATION: number;
    static readonly DEFAULT_RESIZE_THROTTLE: number;
    static readonly DEFAULT_POSITION_IMPROVEMENT_OFFSET: number;
    private _wantsResize;
    private _resizing;
    private _updating;
    private _installed;
    private _contentSize;
    private _containerSize;
    private _scrollPosition;
    private _count;
    private _elements;
    private _positions;
    private _visibleIndices;
    private _onResize;
    private _container;
    private _layout;
    private _currentOperation?;
    readonly content: HTMLElement;
    readonly delegate: CollectionViewDelegate;
    readonly animationDuration: number;
    readonly repositioningClassName: string;
    readonly appearingClassName: string;
    readonly disappearingClassName: string;
    readonly thresholds: CollectionViewThresholds;
    readonly resizeThrottleDuration: number;
    readonly positionImprovementOffset: number;
    readonly scrollPosition: Position;
    readonly layout: CollectionViewLayout;
    readonly contentSize: Size;
    readonly containerSize: Size;
    constructor(content: HTMLElement, layout: CollectionViewLayout, delegate: CollectionViewDelegate, parameters?: CollectionViewParameters);
    uninstall(elementHandler?: (element: HTMLElement) => void): void;
    private readonly currentContainerSize;
    private updateContainerSize;
    private updateCount;
    private updateContentSize;
    private readonly currentScrollPosition;
    private onScroll;
    private getAxisRange;
    private getXRange;
    private getYRange;
    private getIndices;
    private readonly currentIndices;
    private updateCurrentIndices;
    private updateIndices;
    private configureElement;
    private getElementPosition;
    private applyElementPosition;
    private getAndApplyElementPosition;
    private createAndAddElement;
    private repositionVisibleElements;
    private getImprovedPositions;
    isVisible({ x: minX, y: minY }: Position, { width, height }: Size): boolean;
    private resize;
    updateLayout(newLayout: CollectionViewLayout, animated?: boolean): Promise<void>;
    scrollTo({ x: toX, y: toY }: Position, animated?: boolean): void;
    private removeFromParent;
    changeIndices(removedIndices: number[], addedIndices: number[], movedIndexMap: Map<number, number>, animated?: boolean): Promise<void>;
    private startOperation;
    private checkCurrentOperation;
    private delayForOperation;
}
